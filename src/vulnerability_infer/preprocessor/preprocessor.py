import hashlib
import random
import re


class OWASPPreprocessor:
    def __init__(self):
        self.dummy_name_map = {}

    def remove_multiline_comments(self, java_code):
        pattern = re.compile(r"/\*.*?\*/", re.DOTALL)
        cleaned_code = re.sub(pattern, "", java_code)
        return cleaned_code

    def remove_import_statements(self, java_code):
        lines = java_code.split("\n")
        cleaned_lines = [
            line for line in lines if not line.strip().startswith("import")
        ]
        return "\n".join(cleaned_lines)

    def remove_package_declarations(self, java_code):
        lines = java_code.split("\n")
        cleaned_lines = [
            line for line in lines if not line.strip().startswith("package")
        ]
        return "\n".join(cleaned_lines)

    def replace_benchmark_names(self, java_code):
        pattern = re.compile(r"\b(BenchmarkTest\d{5}|owasp.benchmark)\b", re.IGNORECASE)
        return pattern.sub(self.replace_with_dummy, java_code)

    def replace_cwe_names(self, java_code):
        cwe_names = [
            "pathtraver",
            "hash",
            "trustbound",
            "crypto",
            "cmdi",
            "xss",
            "securecookie",
            "ldapi",
            "weakrand",
            "xpathi",
            "sqli",
        ]
        # Regex pattern to match CWE names prefixed by a slash "/"
        pattern = re.compile(r"/(" + "|".join(cwe_names) + r")-", re.IGNORECASE)
        return pattern.sub(
            lambda match: f"/{self.replace_with_dummy(match)}-", java_code
        )

    def replace_with_dummy(self, match):
        keyword = match.group().lower()
        if keyword not in self.dummy_name_map:
            self.dummy_name_map[keyword] = self.generate_random_name()
        return self.dummy_name_map[keyword]

    def generate_random_name(self):
        names = ["Alpha", "Beta", "Gamma", "Delta", "Epsilon"]
        adjs = ["Quick", "Bright", "Silent", "Clever", "Brave"]
        return f"{random.choice(adjs)}{random.choice(names)}{random.randint(100, 999)}"

    def obfuscate_java_code(self, java_code):
        patterns = {
            "class": r"\bclass\s+(\w+)",
            "method": r"\b(?:public|protected|private)\s+\w+\s+(\w+)\(",
            "variable": r"\b(?:int|float|String|boolean)\s+(\w+)[;=]",
        }

        for type_, pattern in patterns.items():
            matches = re.findall(pattern, java_code)
            unique_matches = set(matches)

            for match in unique_matches:
                obfuscated_name = hashlib.md5(match.encode()).hexdigest()[
                    : random.randint(5, 10)
                ]
                # Simple obfuscation
                obfuscated_code = re.sub(
                    r"\b" + match + r"\b", obfuscated_name, java_code
                )

        return obfuscated_code

    def process_file(self, file_path, obfuscate=False):
        with open(file_path, "r", encoding="utf-8") as file:
            java_code = file.read()

        java_code = self.remove_multiline_comments(java_code)
        # java_code = self.remove_import_statements(java_code)
        java_code = self.remove_package_declarations(java_code)
        java_code = self.replace_benchmark_names(java_code)
        java_code = self.replace_cwe_names(java_code)

        if obfuscate:
            java_code = self.obfuscate_java_code(java_code)

        return java_code


if __name__ == "__main__":
    owasp = OWASPPreprocessor()
    obfuscated_code = owasp.process_file("./BenchmarkTest00001.java")
