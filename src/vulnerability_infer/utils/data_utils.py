from sklearn.model_selection import train_test_split


def stratified_sample_list_of_dicts(
    data, stratify_keys, test_size=0.1, random_state=None
):
    """
    Performs stratified sampling on a list of dictionaries based on composite keys.

    Parameters:
    - data (list of dicts): Dataset where each item is a dict with consistent keys.
    - stratify_keys (list): List of two keys to use for creating a composite stratification key.
    - test_size (float): Proportion of the dataset to include in the sample (0-1).
    - random_state (int): Seed for random shuffling.

    Returns:
    - sample_list (list of dicts): List containing only the stratified sample of the original dataset.
    """
    # Create a composite key in each dict
    for item in data:
        item["composite_key"] = (
            f"{item['info'][stratify_keys[0]]}_{item['info'][stratify_keys[1]]}"
        )

    # Prepare data for stratification
    y = [item["composite_key"] for item in data]  # Stratification labels
    X = data  # Data points

    # Perform stratified sampling
    _, X_sample = train_test_split(
        X, test_size=test_size, stratify=y, random_state=random_state
    )

    # Remove composite key before returning
    for item in X_sample:
        del item["composite_key"]

    return X_sample
