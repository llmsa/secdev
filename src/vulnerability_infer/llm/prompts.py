prompt_finetuning = "[INST]\n{prompt}\n[/INST]\n{answer}"

binary_vulnerability_detection_prompt = """
Please identify if the following code snippet given below contains a vulnerability. The code is provided  within triple ticks. If the code snippet contains a vulnerability, please respond with "true". If the code snippet does not contain a vulnerability, please respond with "false". Do not provide any additional information or commentary. The output should be in the format shown in the examples below.

Example Code containing CWE-89 SQL Injection vulnerability:
```
String query = "SELECT account_balance FROM user_data WHERE user_name = "
             + request.getParameter("customerName");
try {{
    Statement statement = connection.createStatement( ... );
    ResultSet results = statement.executeQuery( query );
}} catch (SQLException e) {{
    e.printStackTrace();
}}
```

Example Output:
```
true
```

Example Code Mitigating CWE-89 SQL Injection Risk Using Parameterized Queries:
```
String customerName = request.getParameter("customerName");
String query = "SELECT account_balance FROM user_data WHERE user_name = ?";
try {{
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setString(1, customerName);
    ResultSet results = statement.executeQuery();
    while (results.next()) {{
        System.out.println("Account Balance: " + results.getDouble("account_balance"));
    }}
}} catch (SQLException e) {{
    e.printStackTrace();
}}
```

Example Output:
```
false
```

# Your task is to identify if the following code snippet contains a vulnerability:

Code:
```
{text}
```
"""

fixed_vulnerability_detection_prompt = """
The following code snippet contains code that is fixed to mitigate a vulnerability. Please identify the common weakness enumeration (cwe) number for the vulnerability that the code snippet is mitigating. Do not provide any additional information or commentary. The output should be in the format shown in the example below.

Example Output:
```
CWE-xxx
```

# Your task is to classify the following code snippet:

Code containing mitigation for vulnerability:
```
{text}
```

Output:
```
```
"""

vulnerable_vulnerability_detection_prompt = """
Please identify the potential common weakness enumeration (cwe) number for the following code snippet within triple ticks. Do not provide any additional information or commentary. Output the most probable cwe number. The output should be strictly in the format shown in the examples below, i.e., "CWE-<number>". Use the example as training data. If the code snippet is not relevant, please respond with "N/A".

Example Code:
```
String query = "SELECT account_balance FROM user_data WHERE user_name = "
             + request.getParameter("customerName");
try {{
    Statement statement = connection.createStatement( ... );
    ResultSet results = statement.executeQuery( query );
}} catch (SQLException e) {{
    e.printStackTrace();
}}
```

Example Output:
```
CWE-89
```

# Your task is to classify the following code snippet, Do not include any additional information or commentary:

Code:
```
{text}
```

Output:
```
```
"""


init_vulnerability_detection_prompt = """
Please identify the common weakness enumeration (cwe) number for the following code snippet. If the code snippet does not contain a vulnerability, please respond with "N/A". Do not provide any additional information or commentary. The output should be in the format shown in the examples below. Output the most probable cwe number.

Example Code 1:
```
public static final double price = 20.00;
int quantity = currentUser.getAttribute("quantity");
double total = price * quantity;
chargeUser(total);
```

Example Output 1:
```
22
```

# Your task is to classify the following code snippet:

Code:
```
{text}
```

Output:
```
```
"""

init_vulnerability_detection_prompt_2 = """
Please identify the common weakness enumeration (cwe) number for the following code snippet. If the code snippet does not contain a vulnerability, please respond with "N/A". Do not provide any additional information or commentary. Output the most probable cwe number. The output should be strictly in the format shown in the examples below, i.e., "CWE-<number>".  

Example Code containing CWE-89 SQL Injection vulnerability:
```
String query = "SELECT account_balance FROM user_data WHERE user_name = "
             + request.getParameter("customerName");
try {{
    Statement statement = connection.createStatement( ... );
    ResultSet results = statement.executeQuery( query );
}} catch (SQLException e) {{
    e.printStackTrace();
}}
```

Example Output:
```
CWE-89
```

Example Code Mitigating CWE-89 SQL Injection Risk Using Parameterized Queries:
```
String customerName = request.getParameter("customerName");
String query = "SELECT account_balance FROM user_data WHERE user_name = ?";
try {{
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setString(1, customerName);
    ResultSet results = statement.executeQuery();
    while (results.next()) {{
        System.out.println("Account Balance: " + results.getDouble("account_balance"));
    }}
}} catch (SQLException e) {{
    e.printStackTrace();
}}
```

Example Output:
```
N/A
```

# Your task is to classify the following code snippet, Do not include any additional information or commentary:

Code:
```
{text}
```

Output:
```
```
"""

# This promt has a clue that the code snippet contains only one vulnerability
init_vulnerability_detection_prompt_only_one_vul = """
Please identify the common weakness enumeration (cwe) number for the following code snippet. If the code snippet does not contain a vulnerability, please respond with "N/A". Do not provide any additional information or commentary. The output should be in the format shown in the examples below. Note that the code snippet contains only one vulnerability. Only output the most probable cwe number.

Example Code 1:
```
public static final double price = 20.00;
int quantity = currentUser.getAttribute("quantity");
double total = price * quantity;
chargeUser(total);
```

Example Output 1:
```
22
```

# Your task is to classify the following code snippet:

Code:
```
{text}
```

Output:
```
```
"""

##########################################
# Vaibhav's Prompt
##########################################

# Simple Binary Prompt
simple_binary_system_prompt = """
You are an assistant with expertise in identifying security vulnerabilities within code samples.
When providing a response, please use the following format exclusively: '<True or False>'.
"""

simple_v2_binary_system_prompt = """
You are an assistant with expertise in identifying vulnerabilities within code snippets.
The code will be provided  within triple ticks.
If the code snippet contains a vulnerability, please respond with "True". If the code snippet does not contain a vulnerability, please respond with "False". Do not provide any additional information or commentary.
When providing a response, please use the following format exclusively: '<True or False>'.
"""

simple_binary_user_prompt = """
Is there any vulnerability in the following code within triple ticks?

```
{code}
```
"""

cwe_list = """
- CWE-20: Improper Input Validation
- CWE-22: Path Traversal
- CWE-77: Command Injection
- CWE-78: OS Command Injection
- CWE-79: Cross-site Scripting
- CWE-89: SQL Injection
- CWE-90: LDAP Injection
- CWE-94: Code Injection
- CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer
- CWE-125: Out-of-bounds Read
- CWE-190: Integer Overflow or Wraparound
- CWE-269: Improper Privilege Management
- CWE-276: Incorrect Default Permissions
- CWE-287: Improper Authentication
- CWE-306: Missing Authentication for Critical Function
- CWE-327: Weak Cryptography
- CWE-328: Weak Hashing
- CWE-330: Weak Randomness
- CWE-352: Cross-Site Request Forgery
- CWE-362: Race Condition
- CWE-416: Use After Free
- CWE-434: Unrestricted Upload of File with Dangerous Type
- CWE-476: NULL Pointer Dereference
- CWE-501: Trust Boundary Violation
- CWE-502: Deserialization of Untrusted Data
- CWE-614: Secure Cookie Flag
- CWE-643: XPATH Injection
- CWE-787: Out-of-bounds Write
- CWE-798: Use of Hard-coded Credentials
- CWE-862: Missing Authorization
- CWE-863: Incorrect Authorization
- CWE-918: Server-Side Request Forgery
"""

cwe_list_owasp_dataset = """
- CWE-22: Path Traversal
- CWE-78: Command Injection
- CWE-79: Cross-Site Scripting
- CWE-89: SQL Injection 
- CWE-90: LDAP Injection 
- CWE-327: Weak Cryptography
- CWE-328: Weak Hashing 
- CWE-330: Weak Randomness
- CWE-501: Trust Boundary Violation 
- CWE-614: Secure Cookie Flag
- CWE-643: XPATH Injection
"""

# Vulnerability Specific Prompt
vul_system_prompt = (
    """
You are an assistant with expertise in identifying CWE security vulnerabilities within code snippets.
You need to identify the CWE number of the vulnerability present in the code snippet from the following list:

"""
    + cwe_list
    + """

When providing a response, please use the following format exclusively: '<CWE_number>'.
"""
)

vul_system_v2_prompt = (
    """
You are an assistant with expertise in identifying CWE security vulnerabilities within code snippets.
You will identify the potential common weakness enumeration (cwe) number for the following code snippet within triple ticks. Do not provide any additional information or commentary. Output the most probable cwe number. The output should be strictly in the format shown in the examples below, i.e., "CWE-<number>". If the code snippet is not relevant, please respond with "N/A".

"""
    + cwe_list
    + """

When providing a response, please use the following format exclusively: '<CWE_number>'.
"""
)

vul_system_no_list_prompt = """
You are an assistant with expertise in identifying CWE security vulnerabilities within code snippets.
You will identify the potential common weakness enumeration (cwe) number for the following code snippet within triple ticks.
Do not provide any additional information or commentary. Output the most probable cwe number.
The output should be strictly in the format shown in the examples below, i.e., "CWE-<number>".
If the code snippet is not relevant, please respond with "N/A".

When providing a response, please use the following format exclusively: '<CWE_number>'.
"""

vul_user_prompt = """
What is the potential CWE vulnerability in the following code within triple ticks?

```
{code}
```
"""


# Explanatory-Insights Prompt
EXPL_SYSTEM_PROMPT = """
You are an assistant with deep expertise in identifying, analyzing, and explaining security vulnerabilities within code samples.
When identifying a vulnerability, provide a detailed explanation of the vulnerability's nature, why it is a vulnerability, and the possible consequences if exploited.
Your response should include whether a vulnerability is present, the type of vulnerability based on the CWE classification, and an in-depth analysis of the vulnerability.
Please use the following format for your response: 
'Vulnerability: <True or False> | Vulnerability Type: <CWE_number> | 
Explanation: <detailed explanation of the vulnerability, including potential consequences and why it is considered a vulnerability>.'
"""

EXPL_USER_PROMPT = """
Please analyze the following code for vulnerabilities and provide your insights:
{code}
"""

# Solution Oriented Prompt
SOL_SYSTEM_PROMPT = """
You are an assistant with deep expertise in identifying, analyzing, and proposing solutions to security vulnerabilities within code samples.
When identifying a vulnerability, provide a solution or code modification to mitigate the vulnerability.
Your response should include whether a vulnerability is present, the type of vulnerability based on the CWE classification, and a detailed solution or code modification that addresses the vulnerability effectively.
Please use the following format for your response: 
'Vulnerability: <True or False> | Vulnerability Type: <CWE_number> | 
Solution: <detailed description of the solution or code modification, including how it mitigates the vulnerability>.'
"""

SOL_USER_PROMPT = """
Please analyze the following code for vulnerabilities and suggest modifications to enhance security: 
{code}
"""
